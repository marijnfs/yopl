#comment

("start" > a > bla) (10 > b) > calc > print > print

[Node]
i64 id
f64 val
u64* vals

N, id -> Node n
   n.vals[N]
   n.id = id
]

Node n
n.vals[10]
n.(n.vals.i).(n.vals.i)


#A typed function definition
Node a -> size -> i64 s
   Node list
   list[10]
   i = 0
   i < list[] ?
      list.i > print
      i++
   ^]
   s = a.vals[]
]

i = 0
i < n.vals[] ?
   (n.vals.i) > print
   i++
^]

# A random block, to contain scope / control lifetime of vars
[
   a[10] #a gets allocated (i64 is default)
] #a gets deleted

a, b -> calc -> c
   a = 4 * a
   a > 3 ?
      c = a
   |
      c = f
   ]
]

a -> bla -> c, d
   c = a * 3
   d = 0
]

a = 4
a > bla > > print
a > bla > e f
a, b > bla > print
a > bla > print (bla > calc > print)
a Node

n.val = 3
n.vals[10] #allocation
n.vals.a = 5
n.vals.(n.val) = 4
valsize = n.vals[] #get the nr of elements


b = 5

a = 0
a > print > print

a > 10 ?
   a > print
   a > print > print
   >>
^]


a > 10 ?
   a = a + 1
   a++
   b--
   s.b++
   (a > bla) b > calc > print
^|
   "while ended" > print
]

a.b.2++
